# 抽象类

- abstract 修饰类，此类不能new对象 ,不能创建对象，可以声明引用

```
import java.util.Arrays;

public class Main {

    public static void main(String[] args) {
        Animal a;
        a= new Animal(); // 错误写法 不能创建！！！！！！！！
    }

   abstract class Animal{

   }
}
```

- 如果一个类拥有抽象 方法，这个类必须是 抽象类。 但抽象类中不一定有抽象 方法。

- 子类继承一个抽象类，必须实现父类中的所有抽象方法，否则子类也定义为抽象类。

  ```
  import java.util.Arrays;
  
  public class Main {
  
      public static void main(String[] args) {
          Animal a;
          a= new dog();
          a.eat();
      }
  
  
  }
  
  abstract class Animal{
      public abstract void eat();
  
  }
  class  dog extends Animal{
  
      @Override
      public void eat() {
          System.out.println("gouchi");
      }
  }
  
  ```

# static

- 静态可以修饰属性 和方法

- 静态成员是全类所有对象共享的数据成员

- 在全类中只有一份，不因创建多个对象而产生的

- 属性 全类共有，可以用类名直接访问

- 方法  类名调用 静态方法中只能访问静态成员,不能出现this

- 静态方法只能被子类的静态方法覆盖，而且没有多态

  

  ![](C:\Users\颖宝\AppData\Roaming\Typora\typora-user-images\1554036243492.png)

  ```
  package teststatic;
  
  public class TestStatic {
      public static void main (String args[] ){
          ClassA a1 = new ClassA();
          ClassA a2 = new ClassA();
          a1.m++;
          a1.n++;
          System.out.println(a1.m);
          System.out.println(a1.n);
          System.out.println(a2.n);
          System.out.println(ClassA.n);
      }
  }
  class ClassA{
      int m= 10;
      static int n = 20;
  }
  
  ```


# 多态

- 子类引用可以直接赋值给父类引用
- 父类引用需要强转才能赋值给子类引用
- 没有继承关系的两种类型间不能强制转换赋值
- 

# 接口

- 支持多继承

- 接口之间可以继承

- 一个类在继承另外一个类的同时，还能实现多个接口

- 意义 ： 实现面向对象的弱耦合性 ，接口作为标准，是接口的使用者和实现者实现分离，弱耦合

  ```
  // 强耦合示例
  // 一个台灯 开始安装红灯泡，再改黄灯泡
  package teststatic;
  
  public class TestStatic {
      public static void main (String args[] ){
          Light light = new Light();
         RedBulb redbulb = new RedBulb();
         light.setBulb(redbulb);
        light.powerOn();
  
      }
  }
  class Light{
      private RedBulb bulb;
  
      public void setBulb(RedBulb bulb){
          this.bulb=bulb;
      }
  
      public void powerOn(){
          bulb.laing();
      }
  }
  
  class  RedBulb{
      public void laing (){
          System.out.println("发出红光");
      }
  }
  
  class YellowBulb{
      public void liang (){
          System.out.println("发出黄光");
      }
  }
  
  // 安装黄灯泡
  package teststatic;
  
  public class TestStatic {
      public static void main (String args[] ){
          Light light = new Light();
  //       RedBulb redbulb = new RedBulb();
  //       light.setBulb(redbulb);
  //      light.powerOn();
          YellowBulb yellowBulb = new YellowBulb();
          light.setBulb(yellowBulb);
          light.powerOn();
  
      }
  }
  class Light{
  //    private RedBulb bulb;
  //
  //    public void setBulb(RedBulb bulb){
  //        this.bulb=bulb;
  //    }
      private YellowBulb bulb;
      public void setBulb(YellowBulb bulb){
          this.bulb= bulb;
      }
  
      public void powerOn(){
          bulb.laing();
      }
  }
  
  class  RedBulb{
      public void laing (){
          System.out.println("发出红光");
      }
  }
  
  class YellowBulb{
      public void laing (){
          System.out.println("发出黄光");
      }
  }
  
  
  ```

  - 使用接口解耦和

    ```
    package teststatic;
    
    public class TestStatic {
        public static void main (String args[] ){
            Light light = new Light();
    //       RedBulb redbulb = new RedBulb();
    //       light.setBulb(redbulb);
    //      light.powerOn();
            YellowBulb yellowBulb = new YellowBulb();
            light.setBulb(yellowBulb);
            light.powerOn();
            RedBulb bulb1 = new RedBulb();
            light.setBulb(bulb1);
            light.powerOn();
    
        }
    }
    interface Bulb{
        public void shine();
    }
    class Light{
    //    private RedBulb bulb;
    //
    //    public void setBulb(RedBulb bulb){
    //        this.bulb=bulb;
    //    }
        private Bulb bulb;
        public void setBulb(Bulb bulb){
            this.bulb= bulb;
        }
    
        public void powerOn(){
            bulb.shine();
        }
    }
    
    class  RedBulb implements Bulb{
        public void shine (){
            System.out.println("发出红光");
        }
    }
    
    class YellowBulb implements Bulb{
        public void shine (){
            System.out.println("发出黄光");
        }
    }
    
    ```

    